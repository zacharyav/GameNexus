{"version":3,"sources":["/Users/catchen/Git/repl-it-web/pkg/vite-plugin-cartographer/dist/index.js","../src/cartographer.ts","../src/constants.ts","../package.json"],"names":[],"mappings":"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","file":"/Users/catchen/Git/repl-it-web/pkg/vite-plugin-cartographer/dist/index.js","sourcesContent":[null,"import fs from 'fs/promises';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { parse } from '@babel/parser';\nimport type {\n  Node as BabelNode,\n  JSXIdentifier,\n  JSXMemberExpression,\n  JSXOpeningElement,\n} from '@babel/types';\nimport MagicString from 'magic-string';\nimport type { Plugin } from 'vite';\n\nimport { DATA_ATTRIBUTES } from './constants';\n\nconst validExtensions = new Set(['.jsx', '.tsx']);\n\nexport function cartographer(): Plugin {\n  let clientScript: string;\n  let configuredRoot: string;\n  let configuredRootName: string;\n\n  return {\n    name: '@replit/vite-plugin-cartographer',\n    enforce: 'pre' as const,\n\n    async configResolved(config) {\n      configuredRoot = config.root;\n      // The name of the directory that contains the configured root\n      configuredRootName = path.basename(configuredRoot);\n\n      // Resolve the client script path in both CJS and ESM environments\n      const currentFileUrl =\n        typeof __dirname === 'string'\n          ? path.join(__dirname, '../dist/beacon/index.global.js')\n          : fileURLToPath(\n              new URL('../dist/beacon/index.global.js', import.meta.url),\n            );\n\n      try {\n        clientScript = await fs.readFile(currentFileUrl, 'utf-8');\n      } catch (error) {\n        // eslint-disable-next-line no-console -- This is an error in the plugin\n        console.error(\n          '[replit-cartographer] Failed to load client script:',\n          error,\n        );\n      }\n    },\n\n    resolveId(_source, _importer) {\n      // Let Vite handle the resolution\n      return null;\n    },\n\n    async transform(code: string, id: string) {\n      if (\n        !validExtensions.has(path.extname(id)) ||\n        id.includes('node_modules')\n      ) {\n        return null;\n      }\n\n      try {\n        const ast = parse(code, {\n          sourceType: 'module',\n          plugins: ['jsx', 'typescript'],\n        });\n\n        const magicString = new MagicString(code);\n        let currentElement: BabelNode | null = null;\n\n        // One day the JS ecosystem will decide on one standard to use, until then\n        // We need to dynamically import this so that we don't mess with vite resolving this module\n        const traverse = await import('@babel/traverse').then((m) => m.default);\n\n        traverse(ast, {\n          JSXElement: {\n            enter(elementPath) {\n              currentElement = elementPath.node;\n            },\n            exit() {\n              currentElement = null;\n            },\n          },\n          JSXOpeningElement(elementPath) {\n            if (currentElement) {\n              const jsxNode = elementPath.node;\n              const elementName = getElementName(jsxNode);\n\n              if (!elementName) {\n                return;\n              }\n\n              const { line = 0, column: col = 0 } = jsxNode.loc?.start ?? {};\n\n              const relativeToConfigured = path.relative(configuredRoot, id);\n              const componentPath = path.join(\n                configuredRootName,\n                relativeToConfigured,\n              );\n\n              const componentMetadata =\n                col === 0\n                  ? `${componentPath}:${line}`\n                  : `${componentPath}:${line}:${col}`;\n\n              magicString.appendLeft(\n                jsxNode.name.end ?? 0,\n                ` ${DATA_ATTRIBUTES.METADATA}=\"${componentMetadata}\" ${DATA_ATTRIBUTES.COMPONENT_NAME}=\"${elementName}\"`,\n              );\n            }\n          },\n        });\n\n        return {\n          code: magicString.toString(),\n          map: magicString.generateMap({ hires: true }),\n        };\n      } catch (error) {\n        // eslint-disable-next-line no-console -- I want my errors to be logged :D\n        console.error(`[replit-cartographer] Error processing ${id}:`, error);\n\n        return null;\n      }\n    },\n\n    transformIndexHtml() {\n      if (!clientScript) {\n        return [];\n      }\n\n      return [\n        {\n          tag: 'script',\n          attrs: { type: 'module' },\n          children: clientScript,\n          injectTo: 'head',\n        },\n      ];\n    },\n  };\n}\n\n// Helper function to extract element name from JSX node\nfunction getElementName(jsxNode: JSXOpeningElement): string | null {\n  if (jsxNode.name.type === 'JSXIdentifier') {\n    return jsxNode.name.name;\n  }\n\n  if (jsxNode.name.type === 'JSXMemberExpression') {\n    const memberExpr = jsxNode.name as JSXMemberExpression;\n    const object = memberExpr.object as JSXIdentifier;\n    const property = memberExpr.property as JSXIdentifier;\n\n    return `${object.name}.${property.name}`;\n  }\n\n  return null;\n}\n","export const DATA_ATTRIBUTES = {\n  METADATA: 'data-replit-metadata',\n  COMPONENT_NAME: 'data-component-name',\n} as const;\n","{\n  \"name\": \"@replit/vite-plugin-cartographer\",\n  \"version\": \"0.3.1\",\n  \"private\": false,\n  \"devDependencies\": {\n    \"@replit/tsconfig\": \"workspace:*\",\n    \"@types/babel__core\": \"^7.20.5\",\n    \"@types/babel__traverse\": \"^7.20.6\",\n    \"@types/node\": \"^22.5.5\",\n    \"@typescript-eslint/eslint-plugin\": \"^6.7.0\",\n    \"@typescript-eslint/parser\": \"^6.7.0\",\n    \"tsup\": \"^8.3.5\",\n    \"tsx\": \"^4.9.5\",\n    \"vite\": \"^5.4.10\"\n  },\n  \"main\": \"./src/index.ts\",\n  \"files\": [\n    \"src\"\n  ],\n  \"scripts\": {\n    \"build\": \"tsup\",\n    \"lint\": \"eslint src\",\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\"\"\n  },\n  \"dependencies\": {\n    \"@babel/parser\": \"^7.26.9\",\n    \"@babel/traverse\": \"^7.26.9\",\n    \"@babel/types\": \"^7.26.9\",\n    \"magic-string\": \"^0.30.12\",\n    \"modern-screenshot\": \"^4.6.0\"\n  }\n}\n"]}